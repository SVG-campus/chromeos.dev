---
import Section from '$layouts/section.astro';

import {
  releaseNotes,
  releaseNoteLandings,
  microcopy as micro,
} from '$lib/sanity';
// import { buildSection, buildTopics } from '$lib/documentation';

import SectionNav from '$components/SectionNav.svelte';
import Release from '$components/Release.astro';
// import AppSupport from '$components/AppSupport.svelte';
// import Card from '$components/Card.svelte';

/**
 * Static paths
 *
 * @return {object} paths
 */
export function getStaticPaths() {
  return releaseNoteLandings
    .filter((h) => h._langCode === 'en')
    .map((landing) => {
      const notes = releaseNotes
        .filter((note) => note._langCode === landing._langCode)
        .sort((a, b) => b.stable - a.stable);

      return {
        params: {
          lang: landing._langCode,
        },
        props: {
          landing,
          microcopy: micro[landing._lang],
          notes,
        },
      };
    });
}

const { landing, microcopy, notes } = Astro.props;

const section = notes.map((note) => {
  return {
    title: note.title,
    href: note._slug,
  };
});

const max = notes.reduce((acc, cur) => {
  if (cur.version > acc) {
    acc = cur.version;
  }

  return acc;
}, 0);

const first = notes[0];
const rest = notes.slice(1);

const r = max % 6;
let lts;
let ltc;

// Three past is when LTC graduates to LTS

if (r >= 3) {
  lts = max - r;
  ltc = max + (6 - r);
} else {
  lts = max - 6 - r;
  ltc = max - r;
}

/**
 * Determines the date when a release should be out
 * @param {number} version
 * @return {string}
 */
function ltxDate(version: number) {
  if (version <= max) {
    const n = notes.find((n) => n.version === version);
    if (n) {
      return n.stable.toLocaleDateString(microcopy._localeCode, {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });
    }
  }

  const diff = version - first.version;
  const d = new Date(first.stable);
  const stable = new Date(d.setDate(d.getDate() + diff * 7 * 4));
  return microcopy.releases.relative.expected.replace(
    '((d))',
    stable.toLocaleDateString(microcopy._localeCode, {
      year: 'numeric',
      month: 'long',
    }),
  );
}

const releases = [
  {
    channel: microcopy.releases.stable,
    version: first.version,
    next: '((c))',
    date: ltxDate(first.version),
  },
  {
    channel: 'Beta',
    version: first.version + 1,
    next: '((c))',
    date: ltxDate(first.version + 1),
  },
  {
    channel: microcopy.releases.dev,
    version: first.version + 2,
    next: '((c))',
    date: ltxDate(first.version + 2),
  },
];

const stables = [
  {
    channel: microcopy.releases.lts,
    next:
      lts > max
        ? microcopy.releases.relative.next
        : microcopy.releases.relative.current,
    version: lts,
    date: ltxDate(lts),
  },
  {
    channel: microcopy.releases.ltc,
    next:
      ltc > max
        ? microcopy.releases.relative.next
        : microcopy.releases.relative.current,
    version: ltc,
    date: ltxDate(ltc),
  },
];

if (ltc < max || ltc === max) {
  stables.push({
    channel: microcopy.releases.ltc,
    next: microcopy.releases.relative.next,
    version: ltc + 6,
    date: ltxDate(ltc + 6),
  });
}
---

<Section
  title={landing.title}
  locale={microcopy.locale}
  metadesc={landing.title}
>
  <SectionNav
    active={''}
    title={microcopy.releases.notes}
    links={section}
    client:visible
    slot="subnav"
  />

  <header
    class="hero type--mega"
    style={`background: var(--yellow-75)`}
    id="content"
    slot="header"
  >
    <h1 class="hero--title">{landing.title}</h1>
    <div class="hero--hero">
      <picture>
        <source srcset={landing.backgrounds.large} media="(min-width: 840px)" />
        <img src={landing.backgrounds.small} alt="" />
      </picture>
    </div>
  </header>

  <Fragment slot="content">
    <ol class="releases">
      {
        releases.map((release) => {
          return (
            <li>
              <p class="type--eyebrow">{release.channel}</p>
              <h2 class="type--h3">ChromeOS {release.version}</h2>

              <p class="type--small">{release.date}</p>
            </li>
          );
        })
      }
    </ol>

    <ol class="releases lts">
      {
        stables.map((release) => {
          return (
            <li>
              <p
                class="type--eyebrow"
                set:html={release.next.replace(
                  '((c))',
                  `<abbr title="${release.channel.full}">${release.channel.abbr}</abbr>`,
                )}
              />

              <h2 class="type--h3">ChromeOS {release.version}</h2>

              <p class="type--small">{release.date}</p>
            </li>
          );
        })
      }
    </ol>

    <Release note={first} microcopy={microcopy} max={max} />

    {
      rest.map((note) => (
        <Release note={note} microcopy={microcopy} max={max} condensed={true} />
      ))
    }
  </Fragment>
</Section>

<style lang="scss">
  @use 'sass:map';
  @import '$sass/shared';

  :global(.section) {
    background-color: var(--grey-50);
  }

  :global(.note) {
    @include elevation(0);
    background: var(--white);
    padding: 2rem;
    border-radius: var(--border-radius);
  }

  .releases {
    list-style: none;
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fill, minmax(20ch, 1fr));

    &.lts {
      margin-block-start: 1rem;
      border-top: 1px solid rgba(map.get($google-colors, 'grey-800'), 0.15);
      padding-block-start: 1rem;
      padding-block-end: 1rem;
    }

    img {
      height: 1.5rem;
      width: 1.5rem;
      padding: 0;
    }

    li {
      text-align: center;
    }
  }

  .release {
    text-align: center;
  }

  .hero {
    padding-inline: var(--inline-padding);
    padding-inline-end: 0;

    margin-block-end: 1.5rem;
    display: flex;
    overflow: hidden;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;

    :global([data-theme='dark']) & {
      /* stylelint-disable declaration-no-important */
      // Need the background to be grey no matter what
      background-color: var(--phosphor-grey) !important;
      border: 2px solid var(--phosphor-green);
      /* stylelint-enable declaration-no-important */
    }

    &--title {
      color: var(--black);
      text-wrap: balance;
      padding-block: var(--header-spacing);

      :global([data-theme='dark']) & {
        color: var(--global-green);
      }
    }

    &--hero {
      margin-inline-start: auto;
      align-self: flex-end;
      justify-self: flex-start;

      :global(img) {
        display: block;
        height: 100%;
        width: auto;
        object-fit: cover;
        max-height: 5em;
      }
    }
  }
</style>
