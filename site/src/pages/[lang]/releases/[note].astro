---
import Section from '$layouts/section.astro';

import {
  releaseNotes,
  releaseNoteLandings,
  microcopy as micro,
} from '$lib/sanity';
// import { buildSection, buildTopics } from '$lib/documentation';

import SectionNav from '$components/SectionNav.svelte';
import Release from '$components/Release.astro';

/**
 * Static paths
 *
 * @return {object} paths
 */
export function getStaticPaths() {
  const sections = {};
  const landings = {};
  const max = releaseNotes.reduce((acc, cur) => {
    if (!acc[cur._langCode] || cur.version > acc[cur._langCode]) {
      acc[cur._langCode] = cur.version;
    }

    return acc;
  }, {});

  // TODO: Add next/previous buttons at bottom of relesaes
  // const min = releaseNotes.reduce((acc, cur) => {
  //   if (!acc[cur._langCode] || cur.version < acc[cur._langCode]) {
  //     acc[cur._langCode] = cur.version;
  //   }

  //   return acc;
  // }, {});
  return releaseNotes
    .filter((h) => h._langCode === 'en')
    .map((landing) => {
      if (!landings[landing._langCode]) {
        landings[landing._langCode] = releaseNoteLandings.find(
          (l) => l._langCode === landing._langCode,
        );
      }
      if (!sections[landing._langCode]) {
        sections[landing._langCode] = releaseNotes
          .filter((note) => note._langCode === landing._langCode)
          .sort((a, b) => b.stable - a.stable)
          .map((note) => {
            return {
              title: note.title,
              href: note._slug,
            };
          });
      }
      return {
        params: {
          lang: landing._langCode,
          note: `chromeos-${landing.version}`,
        },
        props: {
          microcopy: micro[landing._lang],
          note: landing,
          backgrounds: landings[landing._langCode].backgrounds,
          sections: sections[landing._langCode],
          max: max[landing._langCode],
          // min: min[landing._langCode],
        },
      };
    });
}

const { backgrounds, microcopy, note, sections, max } = Astro.props;
---

<Section title={note.title} locale={microcopy.locale} metadesc={note.overview}>
  <SectionNav
    active={note._slug}
    title={microcopy.releases.notes}
    links={sections}
    client:visible
    slot="subnav"
  />

  <header
    class="hero type--mega"
    style={`background: var(--yellow-75)`}
    id="content"
    slot="header"
  >
    <h1 class="hero--title">
      {microcopy.releases.notesfor.replace('((v))', note.title)}
    </h1>
    <div class="hero--hero">
      <picture>
        <source srcset={backgrounds.large} media="(min-width: 840px)" />
        <img src={backgrounds.small} alt="" />
      </picture>
    </div>
  </header>

  <Fragment slot="content">
    <Release note={note} microcopy={microcopy} max={max} single={true} />
  </Fragment>
</Section>

<style lang="scss">
  @import '$sass/shared';

  .hero {
    padding-inline: var(--inline-padding);
    padding-inline-end: 0;

    margin-block-end: 1.5rem;
    display: flex;
    overflow: hidden;
    justify-content: space-between;
    align-items: center;
    gap: 1rem;

    :global([data-theme='dark']) & {
      /* stylelint-disable declaration-no-important */
      // Need the background to be grey no matter what
      background-color: var(--phosphor-grey) !important;
      border: 2px solid var(--phosphor-green);
      /* stylelint-enable declaration-no-important */
    }

    &--title {
      color: var(--black);
      text-wrap: balance;
      padding-block: var(--header-spacing);

      :global([data-theme='dark']) & {
        color: var(--global-green);
      }
    }

    &--hero {
      margin-inline-start: auto;
      align-self: flex-end;
      justify-self: flex-start;

      :global(img) {
        display: block;
        height: 100%;
        width: auto;
        object-fit: cover;
        max-height: 5em;
      }
    }
  }
</style>
