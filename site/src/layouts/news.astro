---
import type { Microcopy, Post } from '$types/sanity';
import type { CardProps } from '$components/Card.svelte';
import type { PostHeroProps } from '$components/PostHero.svelte';
import { newsLandings } from '$lib/sanity';
import Wrapper from '$layouts/wrapper.astro';
import PostHero from '$components/PostHero.svelte';
import Card from '$components/Card.svelte';
import Pagination from '$components/Pagination.svelte';

export interface Props {
  featured: Post;
  posts: Array<Post>;
  microcopy: Microcopy;
  page: number;
  pages: number;
}

const { featured, posts, microcopy, page, pages } = Astro.props;
const { locale } = microcopy;

const feature = {
  ...featured.featured,
  cta: {
    text: microcopy.actions.more,
    url: featured._path,
    type: 'link',
  },
  theme: featured.theme,
  form: 'standalone',
} as PostHeroProps;

const postcards = posts.map((post) => {
  return {
    title: post.title,
    body: post.description,
    cta: {
      text: microcopy.actions.more,
      url: post._path,
      type: 'link',
    },
    eyebrow: {
      text: post.theme.eyebrow,
      icon: post.theme.icon,
    },
  } as CardProps;
});

const title = newsLandings.find((l) => l._langCode === locale.code).title;
---

<Wrapper locale={locale} metadesc="" title={title}>
  <div class="news">
    <PostHero {...feature} />
    <section
      class="wrapper wrapper--full-bleed wrapper--padding wrapper--padded wrapper__background wrapper__contained"
    >
      <h2 class="type--h1 news--title">{title}</h2>
      <ol class="news--items">
        {
          postcards.map((post) => {
            return (
              <li class="news--item">
                <Card {...post} />
              </li>
            );
          })
        }
      </ol>
      <Pagination
        base={`/${locale.code}/news`}
        current={page}
        total={pages}
        locale={locale.code}
        labels={microcopy.pagination}
      />
    </section>
  </div>
</Wrapper>

<style lang="scss">
  .news {
    height: 100%;
    display: grid;
    grid-template-rows: auto 1fr;

    &--content {
      display: flex;
      flex-direction: column;
      gap: 2.5rem;
    }
    //
    &--title {
      text-align: center;
      margin-block-end: 2.5rem;
    }

    &--items {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(min(100%, 325px), 1fr));
      justify-items: center;
      gap: 2.5rem 1.5rem;
      list-style: none;

      :global(.card) {
        height: 100%;
      }
    }

    &--item {
      width: 100%;
      height: 100%;
    }
  }

  .wrapper {
    width: 100%;
  }
</style>
