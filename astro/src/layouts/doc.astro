---
import type { Locale } from '$types/content';
import Wrapper from '$layouts/wrapper.astro';
import { findRelated } from '$lib/search';
import Card from '$components/Card.svelte';
import { getMicrocopyFromLangCode } from '$$microcopy';

export interface Props {
  title: string;
  metadesc: string;
  section: string;
  props?: Array<{
    property: string;
    content: string;
  }>;
  locale: Locale;
}

const { title, props = [], locale, metadesc, section } = Astro.props;
const related = findRelated(title, locale.code, Astro.url.pathname);
// console.log(locale);
const microcopy = getMicrocopyFromLangCode(locale.code);
// const microcopy = getMicrocopy(locale.code);
console.log(microcopy);
---

<Wrapper title={title} metadesc={metadesc} locale={locale} props={props}>
  <article class="article">
    <aside class="article--subnav">
      <slot name="subnav" />
    </aside>
    <header class="article--header" id="content">
      <small class="type--eyebrow">{section}</small>
      <h1 class="type--h2">{title}</h1>
    </header>
    <aside class="article--extras">
      <slot name="extras" />
    </aside>
    <section class="article--content type" id="article">
      <slot name="content" />
    </section>
  </article>
  <aside
    class="wrapper wrapper--padding wrapper--padded wrapper--full-bleed wrapper__contained wrapper__background"
  >
    <h3 class="article--recommended type--h1">
      {microcopy.identifiers.recommended}
    </h3>
    <div class="article--recommendations">
      {
        related.map((item) => (
          <Card
            title={item.title}
            body={item.metadesc}
            position="end"
            cta={{
              text: '',
              url: item.href,
              type: 'link',
              direction: 'forward',
            }}
          />
        ))
      }
    </div>
  </aside>
</Wrapper>

<style lang="scss">
  @import '$sass/shared';

  .article {
    display: grid;
    --inline-extras: 1;
    --inline-subnav: 1;

    @include mq($bkpt-article--2-cols) {
      --inline-subnav: 0;
      grid-template-columns: 300px 1fr minmax(50ch, 60ch) 1fr;
      grid-template-rows: auto auto 1fr auto;
    }

    @include mq($bkpt-article--3-cols) {
      --inline-extras: 0;
      grid-template-columns: 300px 1fr minmax(50ch, 80ch) minmax(235px, 320px) 1fr;
    }

    &--header {
      margin-block: 1.5rem;
    }

    &--header,
    &--content,
    &--extras {
      padding-inline: 1.5rem;
      @include mq($bkpt-article--2-cols) {
        grid-column: 3;
      }
    }

    &--content {
      padding-block-end: 2.5rem;
    }

    &--subnav {
      @include mq($bkpt-article--2-cols) {
        grid-row: 1 / span 3;
        margin-block-end: 2.5rem;
      }
    }

    &--extras {
      margin-block-end: 2.5rem;
      @include mq($bkpt-article--3-cols) {
        padding-inline: 0;
        grid-column: 4;
        grid-row: 1 / span 2;
        // margin-block-end: 0;
      }
    }

    &--recommended {
      margin-block: 0;
      margin-inline: auto;
      max-width: 30ch;
      text-align: center;
    }

    &--recommendations {
      grid-template-columns: repeat(auto-fit, minmax(18.75rem, 1fr));
      display: grid;
      gap: 2.5rem 1.5rem;
      margin-block: 2.5rem;
    }
  }
</style>
